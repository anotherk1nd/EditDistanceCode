#This implements basic algo but also outputs the matrix to recover the soln

import scipy as sp

s = 'abdee'
t = 'ade'
m = len(s)
n = len(t)
#print m,n
d = sp.zeros((m,n))
b = sp.zeros((m,n)) # Stores 'arrows' for retrieving soln. Code arrows according to keypad, up = 8,left 4 etc.
for i in range(0,m):
    d[i,0] = i
for j in range(n):
    d[0,j] = j
for j in range(1,n):
    for i in range(1,m):
        if s[i] == t[j]:
            d[i,j] = d[i-1,j-1]
            b[i,j] = 7 # Do nothing and go to next subprob
        elif d[i-1,j] >=  d[i,j-1]:
            d[i,j] = d[i-1,j]
            b[i,j] = 8
        #elif d[i,j-1] >= d[]
        else:
            d[i,j] = d[i,j-1]
            b[i,j] = 4
print d
print b
print int(d[m-1,n-1])